R <- 0.5
reduced.fun.data <- rem.cors(fun.top)
reduced.fun.data$site <- all.metrics$siteID
colnames(reduced.fun.data)
fun.top.mod <- lmer(MPD_func_abundance ~ slope_min + northness_range + latitude + eastness_sd +
eastness_mean + northness_mean + tpi_mean + tpi_max + slope_sd + dsm_range +
eastness_min + (1|site),
data = reduced.fun.data)
fun.top.back <- stepcAIC(fun.top.mod,
direction = "backward",
trace = TRUE,
data = reduced.fun.data)
fun.top.back <- lmer(MPD_func_abundance ~  slope_min + (1| site),
data = reduced.fun.data)
summary(fun.top.back)
# load all the libraries we need
library(MASS)
library(dplyr)
library(lme4)
library(MuMIn)
library(lmerTest)
library(reshape2)
library(cAIC4)
library(ggplot2)
library(ggridges)
library(GGally)
library(corrr)
library(treemapify)
library(ggpubr)
#-------------------------------------------------------------------------------------------------------#
# run a function for variable selection based on multicollinearity
#-------------------------------------------------------------------------------------------------------#
# write up a function to use to remove correlated data
rem.cors <- function(frame) {
# find the number of columns and rows in the dataframe
b <- ncol(frame)
n <- nrow(frame)
# create an empty dataframe
keep1 <- array(0, dim = c(1, b))
# remove columns that are either all zeros or all the same value
for (h in 1:b) {
ifelse(sum(frame[,h]) != 0, keep1[,h] <- h, keep1[,h] <- 0)
ifelse(sum(duplicated(frame[,h])) != n - 1 ,keep1[,h] <- h, keep1[,h] <- 0)
}
# only keep the columns that have values
g <- as.numeric(keep1[keep1 > 0])
new <- frame[,g]
# find the number of columns left after removing no data values
c <- ncol(new)
# create a correlation matrix (will be c x c dimensions)
cor.mat <- cor(new, method = "pearson", use = "na.or.complete")
# make an empty matrix filled with zeros
keep <- array(0, dim = c(1,c))
# make an empty matrix filled with ones
m <- matrix(1, nrow = n, ncol = c)
# now we need to reorder the columns so that they are in the order of most correlated
cor.mat.ord <- cor.mat[,order(-abs(cor.mat[1,]))]
cor.mat.ord <- cor.mat.ord[order(-abs(cor.mat[,1])),]
# loop through the data and remove the data that is too correlated to one another
for (i in 2:c) {
if (i == 2) {
m[,i] <- m[,i]
}
if (i > 2) {
red.mat <- m[,1:(i-1)]
cor.index <- which(red.mat[1,] == 1)
var.cors <- as.numeric(abs(cor.mat.ord[i, cor.index[2:length(cor.index)]]))
ifelse(any(var.cors > R), m[,i] <- 0, m[,i] <- m[,i])
}
}
# save the column names of the variables that we kept
name.index <- which(m[1,] == 1)
cor.names <- colnames(cor.mat.ord)
final.names <- cor.names[name.index]
# pull out the original data from the above variables
og.index <- match(final.names, colnames(new))
out <- new[,og.index]
return(data.frame(out))
}
#-------------------------------------------------------------------------------------------------------#
# set up a dataframe to store the R2 results from the models in
#-------------------------------------------------------------------------------------------------------#
# marginal R2 and describes the proportion of variance explained by the fixed factor(s) alone
# conditional R2, which describes the proportion of variance explained by both the fixed and random factors
# Nakagawa, S., Johnson, P.C.D., Schielzeth, H. (2017) The coefficient of determination RÂ² and intra-class
# correlation coefficient from generalized linear mixed-effects models revisited and expanded. J. R. Soc.
# Interface 14: 20170213.
results.df = data.frame(matrix(NA, ncol = 3, nrow = 3))
colnames(results.df) <- c("div.var", "marginal r2", "conditional r2")
results.df$div.var <- c("taxonomic", "phylogenetic", "functional")
#-------------------------------------------------------------------------------------------------------#
# read in the data and standardize it
#-------------------------------------------------------------------------------------------------------#
# read in data
all.metrics <- read.csv("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissertation_Ch3/data/all_metrics/all_metrics_20200803.csv")
# look at the column names
colnames(all.metrics)
# standardized the data
redist.fun <- function(x){(x-mean(x))/(2*sd(x))}
scale.data <- all.metrics[,c(3:196)]
scale.data <- apply(scale.data,2,redist.fun)
# reattach all the data
all.metrics <- cbind(all.metrics[,c(1:2)], scale.data, all.metrics[,c(197:201)])
#-------------------------------------------------------------------------------------------------------#
# run taxonomic diversity models
#-------------------------------------------------------------------------------------------------------#
### ALL DATA ###
tax.all <- all.metrics[,c(3,6:196)]
R <- 0.5
reduced.tax.data <- rem.cors(tax.all)
reduced.tax.data$site <- all.metrics$siteID
colnames(reduced.tax.data)
tax.all.mod <- lmer(diversity_shannon ~ max_lad_height_range + pc1_min + quantile_10_min + filled_voxel_ratio_sd +
euphotic_tla_min + NIR_sd + max_lad_height_mean + dsm_sd + euphotic_depth_min +
eastness_max + sumSquares_sum + coefVariantion + within_canopy_rugosity_sd +
within_canopy_rugosity_min + SWIR2_max + northness_mean + RVSI_mean + slope_min +
northness_max + eastness_mean + tpi_sd + toc_rugosity_min + toc_rugosity_mean +
tpi_mean + northness_sd + PRI_min + eastness_min + pc2_min + northness_min + (1|site),
data = reduced.tax.data)
tax.mod.back <- stepcAIC(tax.all.mod,
direction = "backward",
trace = TRUE,
data = reduced.tax.data)
tax.mod.back <- lmer(diversity_shannon ~ max_lad_height_range + pc1_min + filled_voxel_ratio_sd +
dsm_sd + within_canopy_rugosity_sd + slope_min + eastness_mean + (1 | site),
data = reduced.tax.data)
summary(tax.mod.back)
MuMIn::r.squaredGLMM(tax.mod.back)
sqrt(mean(residuals(tax.mod.back)^2))
### HSI ###
tax.hsi <- all.metrics[,c(3,6:54)]
R <- 0.5
reduced.tax.data <- rem.cors(tax.hsi)
reduced.tax.data$site <- all.metrics$siteID
tax.hsi.mod <- lmer(diversity_shannon ~ pc1_min + NIR_sd + pc1_sd + sumSquares_sum + reNDVI_range +
RVSI_mean + pc2_min + (1|site),
data = reduced.tax.data)
tax.hsi.back <- stepcAIC(tax.hsi.mod,
direction = "backward",
trace = TRUE,
data = reduced.tax.data)
tax.hsi.back <- lmer(diversity_shannon ~ NIR_sd + pc1_sd + (1 | site),
data = reduced.tax.data)
summary(tax.hsi.back)
MuMIn::r.squaredGLMM(tax.hsi.back)
sqrt(mean(residuals(tax.hsi.back)^2))
### lidar ###
tax.lid <- all.metrics[,c(3,55:159)]
R <- 0.5
reduced.tax.data <- rem.cors(tax.lid)
reduced.tax.data$site <- all.metrics$siteID
colnames(reduced.tax.data)
tax.lid.mod <- lmer(diversity_shannon ~ max_lad_height_range + quantile_10_min + filled_voxel_ratio_sd +
euphotic_tla_min + max_lad_height_mean + quantile_90_sd + euphotic_depth_min +
within_canopy_rugosity_sd + within_canopy_rugosity_min + toc_rugosity_min +
toc_rugosity_mean + filled_voxel_ratio_max + (1|site),
data = reduced.tax.data)
tax.lid.back <- stepcAIC(tax.lid.mod,
direction = "backward",
trace = TRUE,
data = reduced.tax.data)
tax.lid.back <- lmer(diversity_shannon ~ max_lad_height_range + filled_voxel_ratio_sd + euphotic_tla_min +
quantile_90_sd + within_canopy_rugosity_min + filled_voxel_ratio_max + (1 | site),
data = reduced.tax.data)
summary(tax.lid.back)
MuMIn::r.squaredGLMM(tax.lid.back)
sqrt(mean(residuals(tax.lid.back)^2))
### topography ###
tax.top <- all.metrics[,c(3,160:196)]
R <- 0.5
reduced.tax.data <- rem.cors(tax.top)
reduced.tax.data$site <- all.metrics$siteID
colnames(reduced.tax.data)
tax.top.mod <- lmer(diversity_shannon ~ dsm_sd + eastness_max + northness_mean + slope_min + northness_max +
eastness_mean + tpi_sd + dtm_mean + tpi_mean + northness_sd + eastness_min + northness_min +
latitude + (1|site),
data = reduced.tax.data)
tax.top.back <- stepcAIC(tax.top.mod,
direction = "backward",
trace = TRUE,
data = reduced.tax.data)
tax.top.back <- lmer(diversity_shannon ~ dsm_sd + slope_min +
(1 | site),
data = reduced.tax.data)
summary(tax.top.back)
MuMIn::r.squaredGLMM(tax.top.back)
sqrt(mean(residuals(tax.top.back)^2))
##### COMPARISION OF INFORMATION CRITERIA #####
tax.aic <- AIC(tax.mod.back, tax.hsi.back, tax.lid.back, tax.top.back)
tax.aic
tax.aic
#-------------------------------------------------------------------------------------------------------#
# run phylogenetic diversity models
#-------------------------------------------------------------------------------------------------------#
### ALL DATA ###
phy.all <- all.metrics[,c(4,6:196)]
R <- 0.5
reduced.phy.data <- rem.cors(phy.all)
reduced.phy.data$site <- all.metrics$siteID
colnames(reduced.phy.data)
phy.mod <- lmer(MPD_phy_abundance ~ NDVI_max + pc2_min + tpi_mean + max_lad_height_range + pc2_max +
tri_min + NDVI_mean + quantile_90_sd + max_lad_height_min + reNDVI_sd + RVSI_mean +
toc_rugosity_range + euphotic_depth_min + filled_voxel_ratio_max + quantile_10_min +
toc_rugosity_min + eastness_max + within_canopy_rugosity_range + tpi_max +
northness_max + northness_min + sumSquares_sum + northness_mean + max_lad_max +
eastness_mean + northness_sd + eastness_min + (1|site),
data = reduced.phy.data)
phy.mod.back <- stepcAIC(phy.mod,
direction = "backward",
trace = TRUE,
data = reduced.phy.data)
phy.mod.back <- lmer(MPD_phy_abundance ~ max_lad_height_range + tri_min +
NDVI_mean + reNDVI_sd + (1 | site),
data = reduced.phy.data)
summary(phy.mod.back)
MuMIn::r.squaredGLMM(phy.mod.back)
sqrt(mean(residuals(phy.mod.back)^2))
### HSI ###
phy.hsi <- all.metrics[,c(4,6:54)]
R <- 0.5
reduced.phy.data <- rem.cors(phy.hsi)
reduced.phy.data$site <- all.metrics$siteID
colnames(reduced.phy.data)
phy.hsi.mod <- lmer(MPD_phy_abundance ~ NDVI_max + pc2_min + pc2_max + NDVI_mean + reNDVI_sd + RVSI_mean +
sumSquares_sum + PRI_range + (1|site),
data = reduced.phy.data)
phy.hsi.back <- stepcAIC(phy.hsi.mod,
direction = "backward",
trace = TRUE,
data = reduced.phy.data)
phy.hsi.back <- lmer(MPD_phy_abundance ~ pc2_min + NDVI_mean + reNDVI_sd + PRI_range + (1 | site),
data = reduced.phy.data)
summary(phy.hsi.back)
MuMIn::r.squaredGLMM(phy.hsi.back)
sqrt(mean(residuals(phy.hsi.back)^2))
### lidar ###
phy.lid <- all.metrics[,c(4,55:159)]
R <- 0.5
reduced.phy.data <- rem.cors(phy.lid)
reduced.phy.data$site <- all.metrics$siteID
colnames(reduced.phy.data)
phy.lid.mod <- lmer(MPD_phy_abundance ~ euphotic_tla_min + max_lad_height_range + oligophotic_tla_sd +
quantile_90_sd + max_lad_height_min + toc_rugosity_range + euphotic_depth_min +
filled_voxel_ratio_max + quantile_10_min + toc_rugosity_min + within_canopy_rugosity_range +
empty_volume_max + (1|site),
data = reduced.phy.data)
phy.lid.back <- stepcAIC(phy.lid.mod,
direction = "backward",
trace = TRUE,
data = reduced.phy.data)
phy.lid.back <- lmer(MPD_phy_abundance ~ euphotic_tla_min + max_lad_height_range + (1 | site),
data = reduced.phy.data)
summary(phy.lid.back)
MuMIn::r.squaredGLMM(phy.lid.back)
sqrt(mean(residuals(phy.lid.back)^2))
### topography ###
phy.top <- all.metrics[,c(4,160:196)]
R <- 0.5
reduced.phy.data <- rem.cors(phy.top)
reduced.phy.data$site <- all.metrics$siteID
colnames(reduced.phy.data)
phy.top.mod <- lmer(MPD_phy_abundance ~ tpi_mean + tri_min + dtm_max + eastness_max + tpi_max +
northness_max + northness_min + dsm_sd + northness_mean + eastness_mean + northness_sd +
eastness_min + (1|site),
data = reduced.phy.data)
phy.top.back <- stepcAIC(phy.top.mod,
direction = "backward",
trace = TRUE,
data = reduced.phy.data)
phy.top.back <- lmer(MPD_phy_abundance ~  tpi_mean + tri_min + (1| site),
data = reduced.phy.data)
summary(phy.top.back)
MuMIn::r.squaredGLMM(phy.top.back)
sqrt(mean(residuals(phy.top.back)^2))
##### COMPARISION OF INFORMATION CRITERIA #####
phy.aic <- AIC(phy.mod.back, phy.hsi.back, phy.lid.back, phy.top.back)
phy.aic
### ALL DATA ###
fun.all <- all.metrics[,c(5,6:196)]
R <- 0.5
reduced.fun.data <- rem.cors(fun.all)
reduced.fun.data$site <- all.metrics$siteID
colnames(reduced.fun.data)
fun.mod <- lmer(MPD_func_abundance ~ max_lad_height_range + pc1_min + oligophotic_tla_min + porosity_ratio_sd +
quantile_10_min + slope_min + coefVariantion + northness_range + variance_sum + SWIR2_max +
max_lad_height_mean + toc_rugosity_sd + RVSI_mean + eastness_sd + euphotic_depth_min +
reNDVI_range + eastness_mean + northness_mean + tpi_mean + tpi_max + empty_volume_min +
toc_rugosity_min + oligophotic_tla_sd + pc2_min + quantile_75_range + within_canopy_rugosity_mean +
eastness_min + (1|site),
data = reduced.fun.data)
fun.mod.back <- stepcAIC(fun.mod,
direction = "backward",
trace = TRUE,
data = reduced.fun.data)
fun.mod.back <- lmer(MPD_func_abundance ~ max_lad_height_range + pc1_min + porosity_ratio_sd +
slope_min + (1|site),
data = reduced.fun.data)
summary(fun.mod.back)
MuMIn::r.squaredGLMM(fun.mod.back)
sqrt(mean(residuals(fun.mod.back)^2))
### HSI ###
fun.hsi <- all.metrics[,c(5,6:54)]
R <- 0.5
reduced.fun.data <- rem.cors(fun.hsi)
reduced.fun.data$site <- all.metrics$siteID
colnames(reduced.fun.data)
fun.hsi.mod <- lmer(MPD_func_abundance ~ pc1_min + pc1_sd + variance_sum + RVSI_mean +
reNDVI_range + pc2_min + (1|site),
data = reduced.fun.data)
fun.hsi.back <- stepcAIC(fun.hsi.mod,
direction = "backward",
trace = TRUE,
data = reduced.fun.data)
fun.hsi.back <- lmer(MPD_func_abundance ~ pc1_min + (1 | site),
data = reduced.fun.data)
summary(fun.hsi.back)
MuMIn::r.squaredGLMM(fun.hsi.back)
sqrt(mean(residuals(fun.hsi.back)^2))
### lidar ###
fun.lid <- all.metrics[,c(5,55:159)]
R <- 0.5
reduced.fun.data <- rem.cors(fun.lid)
reduced.fun.data$site <- all.metrics$siteID
colnames(reduced.fun.data)
fun.lid.mod <- lmer(MPD_func_abundance ~ max_lad_height_range + oligophotic_tla_min + porosity_ratio_sd +
quantile_10_min + max_lad_height_mean + toc_rugosity_sd + euphotic_depth_min +
within_canopy_rugosity_min + empty_volume_min + toc_rugosity_min +
quantile_75_range + within_canopy_rugosity_mean + (1|site),
data = reduced.fun.data)
fun.lid.mod <- stepcAIC(fun.lid.mod,
direction = "backward",
trace = TRUE,
data = reduced.fun.data)
fun.lid.back <- lmer(MPD_func_abundance ~ max_lad_height_range + porosity_ratio_sd + (1 | site),
data = reduced.fun.data)
summary(fun.lid.back)
MuMIn::r.squaredGLMM(fun.lid.back)
sqrt(mean(residuals(fun.lid.back)^2))
### topography ###
fun.top <- all.metrics[,c(5,160:196)]
R <- 0.5
reduced.fun.data <- rem.cors(fun.top)
reduced.fun.data$site <- all.metrics$siteID
colnames(reduced.fun.data)
fun.top.mod <- lmer(MPD_func_abundance ~ slope_min + northness_range + latitude + eastness_sd +
eastness_mean + northness_mean + tpi_mean + tpi_max + slope_sd + dsm_range +
eastness_min + (1|site),
data = reduced.fun.data)
fun.top.back <- stepcAIC(fun.top.mod,
direction = "backward",
trace = TRUE,
data = reduced.fun.data)
fun.top.back <- lmer(MPD_func_abundance ~  slope_min + (1| site),
data = reduced.fun.data)
summary(fun.top.back)
MuMIn::r.squaredGLMM(fun.top.back)
sqrt(mean(residuals(fun.top.back)^2))
##### COMPARISION OF INFORMATION CRITERIA #####
fun.aic <- AIC(fun.mod.back, fun.hsi.back, fun.lid.back, fun.top.back)
fun.aic
sqrt(mean(residuals(tax.mod.back)^2))
sqrt(mean(residuals(tax.hsi.back)^2))
sqrt(mean(residuals(tax.lid.back)^2))
sqrt(mean(residuals(tax.top.back)^2))
sqrt(mean(residuals(phy.mod.back)^2))
sqrt(mean(residuals(phy.hsi.back)^2))
sqrt(mean(residuals(phy.lid.back)^2))
sqrt(mean(residuals(phy.top.back)^2))
sqrt(mean(residuals(fun.mod.back)^2))
sqrt(mean(residuals(fun.hsi.back)^2))
sqrt(mean(residuals(fun.lid.back)^2))
sqrt(mean(residuals(fun.top.back)^2))
# load all the libraries we need
library(MASS)
library(dplyr)
library(lme4)
library(MuMIn)
library(lmerTest)
library(reshape2)
library(cAIC4)
library(ggplot2)
library(ggridges)
library(GGally)
library(corrr)
library(treemapify)
library(ggpubr)
#-------------------------------------------------------------------------------------------------------#
# run a function for variable selection based on multicollinearity
#-------------------------------------------------------------------------------------------------------#
# write up a function to use to remove correlated data
rem.cors <- function(frame) {
# find the number of columns and rows in the dataframe
b <- ncol(frame)
n <- nrow(frame)
# create an empty dataframe
keep1 <- array(0, dim = c(1, b))
# remove columns that are either all zeros or all the same value
for (h in 1:b) {
ifelse(sum(frame[,h]) != 0, keep1[,h] <- h, keep1[,h] <- 0)
ifelse(sum(duplicated(frame[,h])) != n - 1 ,keep1[,h] <- h, keep1[,h] <- 0)
}
# only keep the columns that have values
g <- as.numeric(keep1[keep1 > 0])
new <- frame[,g]
# find the number of columns left after removing no data values
c <- ncol(new)
# create a correlation matrix (will be c x c dimensions)
cor.mat <- cor(new, method = "pearson", use = "na.or.complete")
# make an empty matrix filled with zeros
keep <- array(0, dim = c(1,c))
# make an empty matrix filled with ones
m <- matrix(1, nrow = n, ncol = c)
# now we need to reorder the columns so that they are in the order of most correlated
cor.mat.ord <- cor.mat[,order(-abs(cor.mat[1,]))]
cor.mat.ord <- cor.mat.ord[order(-abs(cor.mat[,1])),]
# loop through the data and remove the data that is too correlated to one another
for (i in 2:c) {
if (i == 2) {
m[,i] <- m[,i]
}
if (i > 2) {
red.mat <- m[,1:(i-1)]
cor.index <- which(red.mat[1,] == 1)
var.cors <- as.numeric(abs(cor.mat.ord[i, cor.index[2:length(cor.index)]]))
ifelse(any(var.cors > R), m[,i] <- 0, m[,i] <- m[,i])
}
}
# save the column names of the variables that we kept
name.index <- which(m[1,] == 1)
cor.names <- colnames(cor.mat.ord)
final.names <- cor.names[name.index]
# pull out the original data from the above variables
og.index <- match(final.names, colnames(new))
out <- new[,og.index]
return(data.frame(out))
}
#-------------------------------------------------------------------------------------------------------#
# set up a dataframe to store the R2 results from the models in
#-------------------------------------------------------------------------------------------------------#
# marginal R2 and describes the proportion of variance explained by the fixed factor(s) alone
# conditional R2, which describes the proportion of variance explained by both the fixed and random factors
# Nakagawa, S., Johnson, P.C.D., Schielzeth, H. (2017) The coefficient of determination RÂ² and intra-class
# correlation coefficient from generalized linear mixed-effects models revisited and expanded. J. R. Soc.
# Interface 14: 20170213.
results.df = data.frame(matrix(NA, ncol = 3, nrow = 3))
colnames(results.df) <- c("div.var", "marginal r2", "conditional r2")
results.df$div.var <- c("taxonomic", "phylogenetic", "functional")
#-------------------------------------------------------------------------------------------------------#
# read in the data and standardize it
#-------------------------------------------------------------------------------------------------------#
# read in data
all.metrics <- read.csv("C:/Users/Aaron Kamoske/Dropbox/Publications/Kamoske_Dissertation_Ch3/data/all_metrics/all_metrics_20200803.csv")
# look at the column names
colnames(all.metrics)
# standardized the data
redist.fun <- function(x){(x-mean(x))/(2*sd(x))}
scale.data <- all.metrics[,c(3:196)]
scale.data <- apply(scale.data,2,redist.fun)
scale.data
97.78+21.26+9.14
130+1390
19+14+32+14+17
library(raster)
lai <- raster("C:/Users/Aaron Kamoske/Desktop/MLBS/MLBS_LAI.tif")
lai
lad.1 <- raster("C:/Users/Aaron Kamoske/Desktop/MLBS/MLBS_545000_4142000_lad.tif")
lad.1
lad.1[50,50]
lad.1[,50,50]
lad.1[50,50]
lad.1[50]
0.079223+0.147362+0.1103+0.166896+0.239525+0.2117+0.193533+0.134765+0.103081+0.0450024+0.015682
1.447068+0.0718824+0.134873+0.159851+0.202272
1.447068+0.0718824+0.134873+0.159851+0.202272+0.266629
334,466-331457
334466-331457
598+600+601+603+604
334466-327801
334466-324095
334466-320337
334466-316527
334466-312665
334466-308749
334466-304779
334466-300754
334466-296674
334466-292537
334466-288343
334466-284091
334466-279780
334466-275409
334466-270978
334466-266486
334466-261931
334466-257314
ccTot <- 738.07 + 230.58
travel <- 200
music <- 225
costcoMV <- 135
ccPay <- ccTot - travel - music - costcoMV
ccPay
410+200+225
library(devtools)
# Install hypRspec from GitHub
install_github("akamoske/hypRspec")
library(devtools)
library(roxygen2)
setwd("C:/Users/Aaron Kamoske/Dropbox/R_Packages_GitHub/hypRspec")
setwd("C:/Users/Aaron Kamoske/Dropbox/R_Packages_GitHub/hypRspec")
devtools::document()
# Install hypRspec from GitHub
install_github("akamoske/hypRspec")
